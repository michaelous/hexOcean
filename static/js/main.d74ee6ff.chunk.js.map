{"version":3,"sources":["styled-components/submitBtn.js","styled-components/hookForm.js","styled-components/formLabel.js","styled-components/formInput.js","styled-components/formSection.js","styled-components/formAlert.js","styled-components/formSelect.js","styled-components/formOption.js","react-form.js","App.js","index.js"],"names":["SubmitBtn","styled","button","HookForm","form","FormLabel","label","FormInput","input","FormSection","section","FormAlert","FormSelect","select","FormOption","option","Form","useForm","register","handleSubmit","errors","formState","reset","useState","foodType","setFoodType","useEffect","onSubmit","data","a","config","method","headers","body","JSON","stringify","fetch","response","ok","console","log","htmlFor","placeholder","required","pattern","value","message","name","role","preparation_time","onChange","e","target","Type","type","min","max","number_of_slices","diameter","spicness_scale","sandwich_slices","dishTypeSwitch","className","App","ReactDOM","render","StrictMode","document","getElementById"],"mappings":"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","file":"static/js/main.d74ee6ff.chunk.js","sourcesContent":["import styled from 'styled-components'\r\n\r\nexport const SubmitBtn = styled.button`\r\n  color: black;\r\n  cursor: pointer;\r\n  margin: 20px 0;\r\n  padding: 8px;\r\n  width: 100%;\r\n  font-weight: bold;\r\n`;\r\n\r\n","import styled from 'styled-components'\r\n\r\nexport const HookForm = styled.form`\r\n  background: #f5f5f5;\r\n  display: flex;\r\n  justify-content: center;\r\n  align-items: center;\r\n  height: 100vh;\r\n  width: 100vw;\r\n  overflow: hidden;\r\n  box-sizing: content-box;\r\n`;\r\n\r\n","import styled from 'styled-components'\r\n\r\nexport const FormLabel = styled.label`\r\n      text-align: left;\r\n      font-weight: 500;\r\n      margin: 10px 0 5px 0;\r\n      \r\n`;\r\n\r\n","import styled from 'styled-components'\r\n\r\nexport const FormInput = styled.input`\r\n   padding: 5px;\r\n   margin-bottom: 8px;\r\n`;\r\n\r\n","import styled from 'styled-components'\r\n\r\nexport const FormSection = styled.section`\r\ndisplay: flex;\r\nflex-direction: column;\r\nbox-sizing: border-box;\r\nwidth: 400px;\r\nbackground: white;\r\npadding: 25px;\r\nbox-shadow:  0 7px 30px 5px rgba(150,170,180,0.5);\r\nborder-radius: 15px;\r\n`;\r\n\r\n","import styled from 'styled-components'\r\n\r\nexport const FormAlert = styled.label`\r\n    color: tomato;\r\n    font-size: 12px;\r\n`;\r\n\r\n","import styled from 'styled-components'\r\n\r\nexport const FormSelect = styled.select`\r\n    padding: 6px 5px 6px 5px;\r\n    text-transform: capitalize;\r\n`;\r\n\r\n","import styled from 'styled-components'\r\n\r\nexport const FormOption = styled.option`\r\n   font-size: 14px;\r\n`;\r\n\r\n","import React, {useState, useEffect} from \"react\";\r\nimport {useForm} from \"react-hook-form\";\r\nimport {SubmitBtn} from \"./styled-components/submitBtn\";\r\nimport {HookForm} from \"./styled-components/hookForm\";\r\nimport {FormLabel} from \"./styled-components/formLabel\";\r\nimport {FormInput} from \"./styled-components/formInput\";\r\nimport {FormSection} from \"./styled-components/formSection\";\r\nimport {FormAlert} from \"./styled-components/formAlert\";\r\nimport {FormSelect} from \"./styled-components/formSelect\";\r\nimport {FormOption} from \"./styled-components/formOption\";\r\n\r\nconst URL = 'https://frosty-wood-6558.getsandbox.com:443/dishes';\r\nconst initialFoodType = 'pizza';\r\n\r\n\r\nexport const Form = () => {\r\n    const {register, handleSubmit, formState: {errors}, reset} = useForm();\r\n    const [foodType, setFoodType] = useState(initialFoodType);\r\n\r\n    useEffect(() => {\r\n        reset();\r\n    }, [foodType])\r\n\r\n    const onSubmit = async (data) => {\r\n        try {\r\n            const config = {\r\n                method: 'POST',\r\n                headers: {\r\n                    'Content-Type': 'application/json'\r\n                },\r\n                body: JSON.stringify(data)\r\n            }\r\n            const response = await fetch(URL, config)\r\n            if (response.ok) {\r\n                return response\r\n            }\r\n        } catch (error) {\r\n            console.log(error)\r\n        }\r\n    };\r\n\r\n\r\n    const dishTypeSwitch = (Type) => {\r\n        switch (Type) {\r\n            case 'pizza':\r\n                return <>\r\n                    <FormLabel htmlFor=\"number_of_slices\">Pizza slices</FormLabel>\r\n                    <FormInput type=\"number\" placeholder=\"Slices quantity\" {...register(\"number_of_slices\", {\r\n                        required: \"Required\",\r\n                        min: {\r\n                            value: 4,\r\n                            message: \"Minimum 4 slices\"\r\n                        },\r\n                        max: {\r\n                            value: 12,\r\n                            message: \"Maximum 12 slices\"\r\n                        }\r\n                    })} />\r\n                    {errors.number_of_slices && <FormAlert role=\"alert\">{errors.number_of_slices.message}</FormAlert>}\r\n\r\n                    <FormLabel htmlFor=\"diameter\">Pizza diameter</FormLabel>\r\n                    <FormInput type=\"number\" placeholder=\"Pizza diameter\" {...register(\"diameter\", {\r\n                        required: \"Required\",\r\n                        min: {\r\n                            value: 20,\r\n                            message: \"Minimum 20 diameter\"\r\n                        },\r\n                        max: {\r\n                            value: 60,\r\n                            message: \"Maximum 60 diameter\"\r\n                        }\r\n                    })} />\r\n                    {errors.diameter && <FormAlert role=\"alert\">{errors.diameter.message}</FormAlert>}\r\n                </>\r\n\r\n            case 'soup':\r\n                return <>\r\n                    <FormLabel htmlFor=\"spicness_scale\">Soup spicness</FormLabel>\r\n                    <FormInput type={'number'} placeholder=\"Spicness scale\" {...register(\"spicness_scale\", {\r\n                        required: \"Required\",\r\n                        min: {\r\n                            value: 1,\r\n                            message: \"Minimum 1\"\r\n                        },\r\n                        max: {\r\n                            value: 10,\r\n                            message: \"Maximum 10\"\r\n                        }\r\n                    })} />\r\n                    {errors.spicness_scale && <FormAlert role=\"alert\">{errors.spicness_scale.message}</FormAlert>}\r\n                </>\r\n\r\n            case 'sandwich':\r\n                return <>\r\n                    <FormLabel htmlFor=\"sandwich_slices\">Sandwich Slices</FormLabel>\r\n                    <FormInput type=\"number\" placeholder=\"Sandwich slices\" {...register(\"sandwich_slices\", {\r\n                        required: \"Required\",\r\n                        min: {\r\n                            value: 1,\r\n                            message: \"Minimum 1 slice\"\r\n                        },\r\n                        max: {\r\n                            value: 10,\r\n                            message: \"Maximum 10 slices\"\r\n                        }\r\n                    })} />\r\n                    {errors.sandwich_slices && <FormAlert role=\"alert\">{errors.sandwich_slices.message}</FormAlert>}\r\n                </>\r\n        }\r\n    }\r\n\r\n\r\n    return (\r\n        <HookForm onSubmit={handleSubmit(onSubmit)}>\r\n            <FormSection>\r\n                <FormLabel htmlFor=\"name\">Dish Name</FormLabel>\r\n                <FormInput placeholder=\"Dish Name\" {...register(\"name\", {\r\n                    required: \"Required\",\r\n                    pattern: {\r\n                        value: /(\\w)/,\r\n                        message: \"Missing Dish Name\"\r\n                    }\r\n                })} />\r\n                {errors.name && <FormAlert role=\"alert\">{errors.name.message}</FormAlert>}\r\n\r\n                <FormLabel htmlFor=\"preparation_time\">Preparation Time</FormLabel>\r\n                <FormInput placeholder=\"Preparation Time\"  {...register(\"preparation_time\", {\r\n                    required: \"Required\",\r\n                    pattern: {\r\n                        value: /^([0-1]?\\d|2[0-3])(?::([0-5]?\\d))?(?::([0-5]?\\d))?$/,\r\n                        message: 'Format: HH:MM:SS'\r\n                    }\r\n                })} />\r\n                {errors.preparation_time && <FormAlert role=\"alert\">{errors.preparation_time.message}</FormAlert>}\r\n\r\n                <FormLabel htmlFor=\"dishType\">Dish Type</FormLabel>\r\n\r\n                <FormSelect  {...register(\"type\")}\r\n                             value={foodType}\r\n                             onChange={(e) => {\r\n                                 setFoodType(e.target.value)\r\n                             }}>\r\n                    <FormOption value=\"pizza\">pizza</FormOption>\r\n                    <FormOption value=\"soup\">soup</FormOption>\r\n                    <FormOption value=\"sandwich\">sandwich</FormOption>\r\n                </FormSelect>\r\n\r\n                {dishTypeSwitch(foodType)}\r\n\r\n                <SubmitBtn className={\"submitBtn\"} type=\"submit\">SUBMIT</SubmitBtn>\r\n            </FormSection>\r\n        </HookForm>\r\n    );\r\n}","import './app.scss';\r\nimport {Form} from \"./react-form\";\r\n\r\n\r\nfunction App() {\r\n    return (\r\n        <Form/>\r\n    );\r\n}\r\n\r\nexport default App;\r\n","import React from 'react';\r\nimport ReactDOM from 'react-dom';\r\nimport App from './App';\r\n\r\nReactDOM.render(\r\n    <React.StrictMode>\r\n        <App/>\r\n    </React.StrictMode>,\r\n    document.getElementById('root')\r\n);\r\n\r\n"],"sourceRoot":""}