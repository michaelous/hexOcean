{"version":3,"sources":["styled-components/submitBtn.js","styled-components/hookForm.js","styled-components/formLabel.js","styled-components/formInput.js","styled-components/formSection.js","styled-components/formAlert.js","styled-components/formSelect.js","styled-components/formOption.js","react-form.js","App.js","index.js"],"names":["SubmitBtn","styled","button","HookForm","form","FormLabel","label","FormInput","input","FormSection","section","FormAlert","FormSelect","select","FormOption","option","Form","useForm","register","handleSubmit","errors","formState","reset","useState","foodType","setFoodType","keysValues","convertObjectStringsToNum","data","map","value","Number","useEffect","onSubmit","a","object","fetch","method","body","JSON","stringify","headers","res","json","response","console","log","htmlFor","placeholder","required","pattern","message","name","role","preparation_time","onChange","e","target","Type","type","min","max","no_of_slices","diameter","spiciness_scale","slices_of_bread","dishTypeSwitch","className","App","ReactDOM","render","StrictMode","document","getElementById"],"mappings":"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","file":"static/js/main.5b4d0915.chunk.js","sourcesContent":["import styled from 'styled-components'\r\n\r\nexport const SubmitBtn = styled.button`\r\n  color: black;\r\n  cursor: pointer;\r\n  margin: 20px 0;\r\n  padding: 8px;\r\n  width: 100%;\r\n  font-weight: bold;\r\n`;\r\n\r\n","import styled from 'styled-components'\r\n\r\nexport const HookForm = styled.form`\r\n  background: #f5f5f5;\r\n  display: flex;\r\n  justify-content: center;\r\n  align-items: center;\r\n  height: 100vh;\r\n  width: 100vw;\r\n  overflow: hidden;\r\n  box-sizing: content-box;\r\n`;\r\n\r\n","import styled from 'styled-components'\r\n\r\nexport const FormLabel = styled.label`\r\n      text-align: left;\r\n      font-weight: 500;\r\n      margin: 10px 0 5px 0;\r\n      \r\n`;\r\n\r\n","import styled from 'styled-components'\r\n\r\nexport const FormInput = styled.input`\r\n   padding: 5px;\r\n   margin-bottom: 8px;\r\n`;\r\n\r\n","import styled from 'styled-components'\r\n\r\nexport const FormSection = styled.section`\r\ndisplay: flex;\r\nflex-direction: column;\r\nbox-sizing: border-box;\r\nwidth: 400px;\r\nbackground: white;\r\npadding: 25px;\r\nbox-shadow:  0 7px 30px 5px rgba(150,170,180,0.5);\r\nborder-radius: 15px;\r\n`;\r\n\r\n","import styled from 'styled-components'\r\n\r\nexport const FormAlert = styled.label`\r\n    color: tomato;\r\n    font-size: 12px;\r\n`;\r\n\r\n","import styled from 'styled-components'\r\n\r\nexport const FormSelect = styled.select`\r\n    padding: 6px 5px 6px 5px;\r\n    text-transform: capitalize;\r\n`;\r\n\r\n","import styled from 'styled-components'\r\n\r\nexport const FormOption = styled.option`\r\n   font-size: 14px;\r\n`;\r\n\r\n","import React, {useEffect, useState} from \"react\";\r\nimport {useForm} from \"react-hook-form\";\r\nimport {SubmitBtn} from \"./styled-components/submitBtn\";\r\nimport {HookForm} from \"./styled-components/hookForm\";\r\nimport {FormLabel} from \"./styled-components/formLabel\";\r\nimport {FormInput} from \"./styled-components/formInput\";\r\nimport {FormSection} from \"./styled-components/formSection\";\r\nimport {FormAlert} from \"./styled-components/formAlert\";\r\nimport {FormSelect} from \"./styled-components/formSelect\";\r\nimport {FormOption} from \"./styled-components/formOption\";\r\n\r\nconst URL = 'https://frosty-wood-6558.getsandbox.com:443/dishes';\r\nconst initialFoodType = 'pizza';\r\n\r\n\r\nexport const Form = () => {\r\n    const {register, handleSubmit, formState: {errors}, reset} = useForm();\r\n    const [foodType, setFoodType] = useState(initialFoodType);\r\n    const keysValues = ['spiciness_scale', 'slices_of_bread', 'no_of_slices', 'diameter']\r\n\r\n    useEffect(() => {\r\n        reset();\r\n    }, [foodType])\r\n\r\n\r\n    function convertObjectStringsToNum(data) {\r\n        keysValues.map((value) => {\r\n            if (value in data) data[value] = Number(data[value]);\r\n        })\r\n        return data;\r\n    }\r\n\r\n    const onSubmit = async (data) => {\r\n        let object = convertObjectStringsToNum(data);\r\n        try {\r\n            const res = await fetch(URL, {\r\n                method: \"POST\",\r\n                body: JSON.stringify(object),\r\n                headers: {\r\n                    \"Content-Type\": \"application/json\"\r\n                }\r\n            });\r\n            const response = await res.json();\r\n            console.log(response);\r\n            return response;\r\n        } catch (error) {\r\n            console.log(error)\r\n        }\r\n    };\r\n\r\n\r\n    const dishTypeSwitch = (Type) => {\r\n        switch (Type) {\r\n            case 'pizza':\r\n                return <>\r\n                    <FormLabel htmlFor=\"no_of_slices\">Pizza slices</FormLabel>\r\n                    <FormInput type=\"number\" placeholder=\"Slices quantity\" {...register(\"no_of_slices\", {\r\n                        required: \"Required\",\r\n                        min: {\r\n                            value: 4,\r\n                            message: \"Minimum 4 slices\"\r\n                        },\r\n                        max: {\r\n                            value: 12,\r\n                            message: \"Maximum 12 slices\"\r\n                        }\r\n                    })} />\r\n                    {errors.no_of_slices && <FormAlert role=\"alert\">{errors.no_of_slices.message}</FormAlert>}\r\n\r\n                    <FormLabel htmlFor=\"diameter\">Pizza diameter</FormLabel>\r\n                    <FormInput type=\"number\" placeholder=\"Pizza diameter\" {...register(\"diameter\", {\r\n                        required: \"Required\",\r\n                        min: {\r\n                            value: 20,\r\n                            message: \"Minimum 20 diameter\"\r\n                        },\r\n                        max: {\r\n                            value: 60,\r\n                            message: \"Maximum 60 diameter\"\r\n                        }\r\n                    })} />\r\n                    {errors.diameter && <FormAlert role=\"alert\">{errors.diameter.message}</FormAlert>}\r\n                </>\r\n\r\n            case 'soup':\r\n                return <>\r\n                    <FormLabel htmlFor=\"spiciness_scale\">Soup spicness</FormLabel>\r\n                    <FormInput type={'number'} placeholder=\"Spiciness scale\" {...register(\"spiciness_scale\", {\r\n                        required: \"Required\",\r\n                        min: {\r\n                            value: 1,\r\n                            message: \"Minimum 1\"\r\n                        },\r\n                        max: {\r\n                            value: 10,\r\n                            message: \"Maximum 10\"\r\n                        }\r\n                    })} />\r\n                    {errors.spiciness_scale && <FormAlert role=\"alert\">{errors.spiciness_scale.message}</FormAlert>}\r\n                </>\r\n\r\n            case 'sandwich':\r\n                return <>\r\n                    <FormLabel htmlFor=\"slices_of_bread\">Sandwich Slices</FormLabel>\r\n                    <FormInput type=\"number\" placeholder=\"Sandwich slices\" {...register(\"slices_of_bread\", {\r\n                        required: \"Required\",\r\n                        min: {\r\n                            value: 1,\r\n                            message: \"Minimum 1 slice\"\r\n                        },\r\n                        max: {\r\n                            value: 10,\r\n                            message: \"Maximum 10 slices\"\r\n                        }\r\n                    })} />\r\n                    {errors.slices_of_bread && <FormAlert role=\"alert\">{errors.slices_of_bread.message}</FormAlert>}\r\n                </>\r\n        }\r\n    }\r\n\r\n\r\n    return (\r\n        <HookForm onSubmit={handleSubmit(onSubmit)}>\r\n            <FormSection>\r\n                <FormLabel htmlFor=\"name\">Dish Name</FormLabel>\r\n                <FormInput placeholder=\"Dish Name\" {...register(\"name\", {\r\n                    required: \"Required\",\r\n                    pattern: {\r\n                        value: /(\\w)/,\r\n                        message: \"Missing Dish Name\"\r\n                    }\r\n                })} />\r\n                {errors.name && <FormAlert role=\"alert\">{errors.name.message}</FormAlert>}\r\n\r\n                <FormLabel htmlFor=\"preparation_time\">Preparation Time</FormLabel>\r\n                <FormInput placeholder=\"Preparation Time\"  {...register(\"preparation_time\", {\r\n                    required: \"Required\",\r\n                    pattern: {\r\n                        value: /^([0-1]?\\d|2[0-3])(?::([0-5]?\\d))?(?::([0-5]?\\d))?$/,\r\n                        message: 'Format: HH:MM:SS'\r\n                    }\r\n                })} />\r\n                {errors.preparation_time && <FormAlert role=\"alert\">{errors.preparation_time.message}</FormAlert>}\r\n\r\n                <FormLabel htmlFor=\"dishType\">Dish Type</FormLabel>\r\n\r\n                <FormSelect  {...register(\"type\")}\r\n                             value={foodType}\r\n                             onChange={(e) => {\r\n                                 setFoodType(e.target.value)\r\n                             }}>\r\n                    <FormOption value=\"pizza\">pizza</FormOption>\r\n                    <FormOption value=\"soup\">soup</FormOption>\r\n                    <FormOption value=\"sandwich\">sandwich</FormOption>\r\n                </FormSelect>\r\n\r\n                {dishTypeSwitch(foodType)}\r\n\r\n                <SubmitBtn className={\"submitBtn\"} type=\"submit\">SUBMIT</SubmitBtn>\r\n            </FormSection>\r\n        </HookForm>\r\n    );\r\n}","import './app.scss';\r\nimport {Form} from \"./react-form\";\r\n\r\n\r\nfunction App() {\r\n    return (\r\n        <Form/>\r\n    );\r\n}\r\n\r\nexport default App;\r\n","import React from 'react';\r\nimport ReactDOM from 'react-dom';\r\nimport App from './App';\r\n\r\nReactDOM.render(\r\n    <React.StrictMode>\r\n        <App/>\r\n    </React.StrictMode>,\r\n    document.getElementById('root')\r\n);\r\n\r\n"],"sourceRoot":""}